{"code":0,"msg":null,"data":{"id":"3235","vcIndexsetId":"IDX10003334","vcTypeId":"ITI202207220090429442","vcIndexsetName":"表对比信息","vcTypeName":null,"vcIndexsetLabelCode":null,"vcIndexsetLabelName":null,"vcCaclName":"VAI10000102","vcCaclNameName":"产品指标","vcIndexsetFrom":"计算引擎","vcValueMethod":"java","vcValueMethodName":"Java","vcIndexsetDescribe":null,"vcDateScript":"/**```vcIndexsetReturnCode:tableName,vcIndexsetReturnName:表名,vcIndexsetReturnType:String```**/\n/**```vcIndexsetReturnCode:memInfo,vcIndexsetReturnName:内存信息,vcIndexsetReturnType:String```**/\n/**```vcIndexsetReturnCode:dataBaseInfo,vcIndexsetReturnName:数据库信息,vcIndexsetReturnType:String```**/\n/**```vcIndexsetReturnCode:isSame,vcIndexsetReturnName:是否一致,vcIndexsetReturnType:String```**/\n\n\npackage com.kaiyufound.finance.system;\n\nimport com.kaiyufound.common.MapParser;\nimport com.kaiyufound.common.bo.Result;\nimport com.kaiyufound.common.bo.ResultRow;\nimport com.kaiyufound.common.def.DataType;\nimport com.kaiyufound.common.util.NullUtil;\nimport com.kaiyufound.core.cache.TableCaches;\nimport com.kaiyufound.core.conf.TableConf;\nimport com.kaiyufound.core.conf.TableConfManager;\nimport com.kaiyufound.core.source.CnDataSources;\nimport com.kaiyufound.framework.service.BaseIndicator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static cn.hutool.db.DbUtil.close;\n\n/**\n * @author wuf\n * @date 2022/11/22\n */\npublic class DataCheckMemAndDataBase extends BaseIndicator {\n    private final static Logger logger = LoggerFactory.getLogger(DataCheckMemAndDataBase.class);\n\n    @Override\n    public Result process(Map<String, Object> parameters) {\n        Result result = initResult(parameters);\n        MapParser mapParser = new MapParser(parameters);\n        String tableNameStr = mapParser.parseString(\"tableName\");\n\n        List<String> dataBaseTableNames = new ArrayList<>();\n        if (NullUtil.isNull(tableNameStr)) {\n            dataBaseTableNames = TableConfManager.getInstance().getTableNames(); //getCnDataTableData();\n        } else {\n            dataBaseTableNames.add(tableNameStr);\n        }\n\n        for (String dataBaseTableName : dataBaseTableNames) {\n            Map<String, Object> memoryInfo = getFromMemory(dataBaseTableName);\n            if (memoryInfo.size() <= 0) {\n                continue;\n            }\n            long memMaxDsId = (long) memoryInfo.get(\"maxId\");\n            long memMinDsId = (long) memoryInfo.get(\"minId\");\n            long memCountNum = (int) memoryInfo.get(\"count\");\n            String memWhereColumn = (String) memoryInfo.get(\"memWhereColumn\");\n            Map<String, Long> dbInfo = getFromDB(dataBaseTableName, memWhereColumn);\n            if (dbInfo.size() <= 0) {\n                continue;\n            }\n            long dbMaxDsId = dbInfo.get(\"maxId\");\n            long dbMinDsId = dbInfo.get(\"minId\");\n            long dbCountNum = dbInfo.get(\"count\");\n            String isSame = \"不一致\";\n            if (memMaxDsId == dbMaxDsId && memMinDsId == dbMinDsId && memCountNum == dbCountNum) {\n                isSame = \"一致\";\n            }\n            ResultRow resultRow = result.newResultRow();\n            resultRow.putValue(\"tableName\", dataBaseTableName);\n            resultRow.putValue(\"memInfo\", (\"memCount = \" + memCountNum + \" memMinId = \" + memMinDsId + \" memMaxId = \" + memMaxDsId + \" where \" + memWhereColumn));\n            resultRow.putValue(\"dataBaseInfo\", (\"dbCount = \" + dbCountNum + \" dbMinId = \" + dbMinDsId + \" dbMaxId = \" + dbMaxDsId + \" where \" + memWhereColumn));\n            resultRow.putValue(\"isSame\", isSame);\n        }\n\n        return result;\n    }\n\n    /**\n     * 从内存中加载表信息\n     */\n    private Map<String, Object> getFromMemory(String tableName) {\n        TableConf tableConf = TableConfManager.getInstance().getTableConf(tableName);\n        if (tableConf != null && tableConf.getDataSource() != null && tableConf.getDataSource() != \"\") {\n            String dataSource = tableConf.getDataSource();\n            if (\"data\".equals(dataSource)) {\n                try {\n                    Map<String, Object> tableInfo = TableCaches.getInstance().get(tableName).getTableInfo();\n                    String whereColumn = tableConf.getWhere();\n\n                    tableInfo.put(\"memWhereColumn\", whereColumn);\n                    return tableInfo;\n                } catch (Exception e) {\n                    logger.error(tableName + \" getTableInfo error\", e);\n                }\n            }\n        }\n\n        return new HashMap<>();\n    }\n\n\n    /**\n     * 获取tableconf中全部表信息\n     */\n    public List<String> getCnDataTableData() {\n        List<String> tableNameList = new ArrayList<>();\n        ResultSet rs = null;\n        PreparedStatement ps = null;\n        Connection con = null;\n        DataSource dataSource = CnDataSources.getInstance().getDataSource(\"meta\");\n\n        try {\n            con = dataSource.getConnection();\n            StringBuilder builder = new StringBuilder();\n            builder.append(\"SELECT TABLE_NAME\").append(\" FROM \").append(\"CN_DATA_TABLE_CONF\").append(\" WHERE DATA_SOURCE_NAME = 'data' \");\n            String sql = builder.toString();\n\n            ps = con.prepareStatement(sql);\n            rs = ps.executeQuery();\n            while (rs.next()) {\n                String tableName = rs.getString(\"TABLE_NAME\");\n                tableNameList.add(tableName);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            close(con, ps, rs);\n        }\n        return tableNameList;\n    }\n\n    /**\n     * 从数据库中加载表信息\n     */\n    private Map<String, Long> getFromDB(String tableName, String whereColumn) {\n        Map<String, Long> map = new HashMap<>();\n        ResultSet rs = null;\n        PreparedStatement ps = null;\n        Connection con = null;\n        DataSource dataSource = CnDataSources.getInstance().getDataSource(\"data\");\n        try {\n            con = dataSource.getConnection();\n            StringBuilder builder = new StringBuilder();\n            builder.append(\"SELECT MAX(DS_ID) AS MAX_DS_ID,MIN(DS_ID) AS MIN_DS_ID,COUNT(1) AS COUNT_NUM\").append(\" FROM \" + tableName).append(\" WHERE \").append(\"1=1 \").append(whereColumn == null ? \" \" : \"and \" + whereColumn);\n            String sql = builder.toString();\n            ps = con.prepareStatement(sql);\n            rs = ps.executeQuery();\n            while (rs.next()) {\n                long maxDsId = rs.getLong(\"MAX_DS_ID\");\n                long minDsId = rs.getLong(\"MIN_DS_ID\");\n                long countNum = rs.getLong(\"COUNT_NUM\");\n                map.put(\"maxId\", maxDsId);\n                map.put(\"minId\", minDsId);\n                map.put(\"count\", countNum);\n            }\n        } catch (Exception e) {\n            logger.error(\"DataCheckMemAndDataBase getFromDB error\", e);\n        } finally {\n            close(con, ps, rs);\n        }\n\n        return map;\n    }\n\n    @Override\n    public Result initResult() {\n        Result result = new Result();\n        result.addHeader(\"tableName\", \"表名\", DataType.STRING);\n        result.addHeader(\"memInfo\", \"内存信息\", DataType.STRING);\n        result.addHeader(\"dataBaseInfo\", \"数据库信息\", DataType.STRING);\n        result.addHeader(\"isSame\", \"是否一致\", DataType.STRING);\n        return result;\n    }\n}","vcIndexsetStatus":"1","vcCrateUser":"44","vcCrateUserName":"系统管理员","dCreate":"2024-03-01 09:04:40","vcUpdateUser":null,"vcUpdateUserName":null,"dUpdate":null,"vcVersionId":"1763370014905339904","vcReleaseStatus":null,"vcRequest":null,"vcRequestAddr":null,"vcRequestParam":null,"vcMd5":null,"sort":null,"pageSize":null,"pageNo":null,"indexsetParamInfoList":[],"indexsetResultInfos":[{"vcIndexsetReturnId":null,"vcIndexsetId":"IDX10003334","vcIndexsetReturnCode":"memInfo","vcIndexsetReturnName":"内存信息","vcIndexsetReturnType":"String","vcIndexsetReturnExample":null,"vcRemarks":null,"vcCreateUser":"44","vcUpdateUser":"44","vcVersionId":"1763370014905339904","vcPolymerizeType":"OFF","vcPolymerizeTypeName":"不选择","vcIndexsetReturnPid":null,"dupdate":"2024-03-01 09:05:48","dcrete":null},{"vcIndexsetReturnId":null,"vcIndexsetId":"IDX10003334","vcIndexsetReturnCode":"dataBaseInfo","vcIndexsetReturnName":"数据库信息","vcIndexsetReturnType":"String","vcIndexsetReturnExample":null,"vcRemarks":null,"vcCreateUser":"44","vcUpdateUser":"44","vcVersionId":"1763370014905339904","vcPolymerizeType":"OFF","vcPolymerizeTypeName":"不选择","vcIndexsetReturnPid":null,"dupdate":"2024-03-01 09:05:48","dcrete":null},{"vcIndexsetReturnId":null,"vcIndexsetId":"IDX10003334","vcIndexsetReturnCode":"tableName","vcIndexsetReturnName":"表名","vcIndexsetReturnType":"String","vcIndexsetReturnExample":null,"vcRemarks":null,"vcCreateUser":"44","vcUpdateUser":"44","vcVersionId":"1763370014905339904","vcPolymerizeType":"OFF","vcPolymerizeTypeName":"不选择","vcIndexsetReturnPid":null,"dupdate":"2024-03-01 09:05:48","dcrete":null},{"vcIndexsetReturnId":null,"vcIndexsetId":"IDX10003334","vcIndexsetReturnCode":"isSame","vcIndexsetReturnName":"是否一致","vcIndexsetReturnType":"String","vcIndexsetReturnExample":null,"vcRemarks":null,"vcCreateUser":"44","vcUpdateUser":"44","vcVersionId":"1763370014905339904","vcPolymerizeType":"OFF","vcPolymerizeTypeName":"不选择","vcIndexsetReturnPid":null,"dupdate":"2024-03-01 09:05:48","dcrete":null}]}}